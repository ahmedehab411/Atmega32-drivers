
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000bae  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <USART_Init>:

#include "USART_INT.h"
#include "USART_REG.h"

void USART_Init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <USART_Init+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRB=0;
  76:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8UCSRC=0;
  78:	19 82       	std	Y+1, r1	; 0x01

	Set_Bit(Local_u8UCSRB,USART_UCSRB_e_RXEN);
  7a:	8a 81       	ldd	r24, Y+2	; 0x02
  7c:	80 61       	ori	r24, 0x10	; 16
  7e:	8a 83       	std	Y+2, r24	; 0x02
	Set_Bit(Local_u8UCSRB,USART_UCSRB_e_TXEN);
  80:	8a 81       	ldd	r24, Y+2	; 0x02
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8a 83       	std	Y+2, r24	; 0x02

	Set_Bit(Local_u8UCSRC,USART_UCSRC_e_URSEL);
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(Local_u8UCSRC,USART_UCSRC_e_UCSZ1);
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(Local_u8UCSRC,USART_UCSRC_e_UCSZ0);
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	82 60       	ori	r24, 0x02	; 2
  96:	89 83       	std	Y+1, r24	; 0x01

	UCSRB_REG=Local_u8UCSRB;
  98:	ea e2       	ldi	r30, 0x2A	; 42
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	8a 81       	ldd	r24, Y+2	; 0x02
  9e:	80 83       	st	Z, r24
	UCSRC_REG=Local_u8UCSRC;
  a0:	e0 e4       	ldi	r30, 0x40	; 64
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	80 83       	st	Z, r24

	UBRRL_REG=51;
  a8:	e9 e2       	ldi	r30, 0x29	; 41
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	80 83       	st	Z, r24
	UBRRH_REG=0;
  b0:	e0 e4       	ldi	r30, 0x40	; 64
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1
}
  b6:	0f 90       	pop	r0
  b8:	0f 90       	pop	r0
  ba:	cf 91       	pop	r28
  bc:	df 91       	pop	r29
  be:	08 95       	ret

000000c0 <USART_SendData>:
void USART_SendData(u8 Data)
{
  c0:	df 93       	push	r29
  c2:	cf 93       	push	r28
  c4:	0f 92       	push	r0
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
	UDR_REG=Data;
  cc:	ec e2       	ldi	r30, 0x2C	; 44
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	80 83       	st	Z, r24
	while(Get_Bit(UCSRA_REG,USART_UCSRA_e_UDRE)==0);
  d4:	eb e2       	ldi	r30, 0x2B	; 43
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 95       	swap	r24
  dc:	86 95       	lsr	r24
  de:	87 70       	andi	r24, 0x07	; 7
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	81 70       	andi	r24, 0x01	; 1
  e6:	90 70       	andi	r25, 0x00	; 0
  e8:	00 97       	sbiw	r24, 0x00	; 0
  ea:	a1 f3       	breq	.-24     	; 0xd4 <USART_SendData+0x14>
}
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <USART_RecieveData>:
u8 USART_RecieveData(void)
{
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	0f 92       	push	r0
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	u8 Recieved;
	while(Get_Bit(UCSRA_REG,USART_UCSRA_e_RXC)==0);
  fe:	eb e2       	ldi	r30, 0x2B	; 43
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 23       	and	r24, r24
 106:	dc f7       	brge	.-10     	; 0xfe <USART_RecieveData+0xa>
	Recieved=UDR_REG;
 108:	ec e2       	ldi	r30, 0x2C	; 44
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	89 83       	std	Y+1, r24	; 0x01
	return Recieved;
 110:	89 81       	ldd	r24, Y+1	; 0x01
}
 112:	0f 90       	pop	r0
 114:	cf 91       	pop	r28
 116:	df 91       	pop	r29
 118:	08 95       	ret

0000011a <main>:
#include"LIB/bitmath.h"

#include "USART_INT.h"

void main (void)
{
 11a:	df 93       	push	r29
 11c:	cf 93       	push	r28
 11e:	0f 92       	push	r0
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
	DDRA=0xFF;
 124:	ea e3       	ldi	r30, 0x3A	; 58
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	80 83       	st	Z, r24
	u8 character;
	USART_Init();
 12c:	0e 94 36 00 	call	0x6c	; 0x6c <USART_Init>
	while(1)
	{
		character=USART_RecieveData();
 130:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_RecieveData>
 134:	89 83       	std	Y+1, r24	; 0x01
		if(character=='1')
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	81 33       	cpi	r24, 0x31	; 49
 13a:	41 f4       	brne	.+16     	; 0x14c <main+0x32>
		{
			PORTA=0xFF;
 13c:	eb e3       	ldi	r30, 0x3B	; 59
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	80 83       	st	Z, r24
			USART_SendData('D');
 144:	84 e4       	ldi	r24, 0x44	; 68
 146:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_SendData>
 14a:	f2 cf       	rjmp	.-28     	; 0x130 <main+0x16>
		}
		else
		{
			PORTA=0x00;
 14c:	eb e3       	ldi	r30, 0x3B	; 59
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	10 82       	st	Z, r1
 152:	ee cf       	rjmp	.-36     	; 0x130 <main+0x16>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
